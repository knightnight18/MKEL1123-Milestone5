/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 21.06.2022 15:37:58

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 42880;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[15];
TfLiteEvalTensor tflEvalTensors[15];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,32,32,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 1024, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data2[32*3*3*1] = { 
  /* [0][0][][] */ -70, 47, 44, 
  /* [0][1][][] */ -4, -67, -113, 
  /* [0][2][][] */ 127, 13, -53, 
  /* [1][0][][] */ 50, 35, -31, 
  /* [1][1][][] */ 110, -26, -127, 
  /* [1][2][][] */ 78, -73, -21, 
  /* [2][0][][] */ 6, -127, -41, 
  /* [2][1][][] */ 77, 11, -72, 
  /* [2][2][][] */ 10, -63, 83, 
  /* [3][0][][] */ -124, 122, -21, 
  /* [3][1][][] */ 48, 59, 23, 
  /* [3][2][][] */ 127, -50, -14, 
  /* [4][0][][] */ 11, 104, -56, 
  /* [4][1][][] */ 50, 79, 73, 
  /* [4][2][][] */ 49, 125, 127, 
  /* [5][0][][] */ 96, 53, 74, 
  /* [5][1][][] */ 127, 73, -1, 
  /* [5][2][][] */ 49, -14, -83, 
  /* [6][0][][] */ -79, -27, -116, 
  /* [6][1][][] */ 42, 69, -43, 
  /* [6][2][][] */ 29, 127, 15, 
  /* [7][0][][] */ 26, 92, 37, 
  /* [7][1][][] */ 85, 21, 127, 
  /* [7][2][][] */ 103, 112, 84, 
  /* [8][0][][] */ 55, -91, -118, 
  /* [8][1][][] */ 125, -3, 30, 
  /* [8][2][][] */ 127, -53, -40, 
  /* [9][0][][] */ 73, 72, 111, 
  /* [9][1][][] */ 86, 77, 96, 
  /* [9][2][][] */ 67, 127, 21, 
  /* [10][0][][] */ -46, -127, 4, 
  /* [10][1][][] */ 66, -22, -15, 
  /* [10][2][][] */ -3, -33, -117, 
  /* [11][0][][] */ 127, -35, 53, 
  /* [11][1][][] */ 126, 39, 93, 
  /* [11][2][][] */ 42, 76, -40, 
  /* [12][0][][] */ 107, -69, -6, 
  /* [12][1][][] */ 127, -76, -31, 
  /* [12][2][][] */ 90, -104, -77, 
  /* [13][0][][] */ -4, -30, -127, 
  /* [13][1][][] */ 2, 97, 17, 
  /* [13][2][][] */ -60, 33, -31, 
  /* [14][0][][] */ -41, -1, 127, 
  /* [14][1][][] */ -17, -9, 62, 
  /* [14][2][][] */ -42, -53, 118, 
  /* [15][0][][] */ -21, -30, 34, 
  /* [15][1][][] */ 127, 64, 29, 
  /* [15][2][][] */ 90, 104, -16, 
  /* [16][0][][] */ -66, 34, 46, 
  /* [16][1][][] */ -59, -46, 62, 
  /* [16][2][][] */ -81, -75, 127, 
  /* [17][0][][] */ -120, 81, 79, 
  /* [17][1][][] */ -127, 114, -124, 
  /* [17][2][][] */ -5, -25, -110, 
  /* [18][0][][] */ -90, -127, 0, 
  /* [18][1][][] */ -47, -31, -36, 
  /* [18][2][][] */ 6, -100, -36, 
  /* [19][0][][] */ -10, 47, 88, 
  /* [19][1][][] */ 56, -77, 127, 
  /* [19][2][][] */ -33, 35, -5, 
  /* [20][0][][] */ -108, 73, 97, 
  /* [20][1][][] */ -38, -11, 42, 
  /* [20][2][][] */ -40, -3, -127, 
  /* [21][0][][] */ 75, 35, 42, 
  /* [21][1][][] */ 20, 34, 113, 
  /* [21][2][][] */ 117, 127, 10, 
  /* [22][0][][] */ -78, 127, 8, 
  /* [22][1][][] */ 11, 27, 23, 
  /* [22][2][][] */ -58, -87, 1, 
  /* [23][0][][] */ -63, -48, -83, 
  /* [23][1][][] */ 19, 104, 127, 
  /* [23][2][][] */ -53, -47, 4, 
  /* [24][0][][] */ 23, 73, 100, 
  /* [24][1][][] */ -127, -51, 44, 
  /* [24][2][][] */ -57, -36, 29, 
  /* [25][0][][] */ -59, -105, 5, 
  /* [25][1][][] */ 127, 15, -74, 
  /* [25][2][][] */ 75, -18, -41, 
  /* [26][0][][] */ 89, 116, 127, 
  /* [26][1][][] */ -55, 92, 95, 
  /* [26][2][][] */ -77, 51, 94, 
  /* [27][0][][] */ 127, 102, 35, 
  /* [27][1][][] */ -113, -87, -105, 
  /* [27][2][][] */ -38, 11, 12, 
  /* [28][0][][] */ 75, 56, 127, 
  /* [28][1][][] */ -84, -52, -80, 
  /* [28][2][][] */ -35, -39, -42, 
  /* [29][0][][] */ -5, -80, -22, 
  /* [29][1][][] */ 42, 127, -8, 
  /* [29][2][][] */ -47, 103, 124, 
  /* [30][0][][] */ -127, 58, 101, 
  /* [30][1][][] */ -23, -100, 107, 
  /* [30][2][][] */ -82, -124, 113, 
  /* [31][0][][] */ 52, 46, 1, 
  /* [31][1][][] */ 3, -111, 127, 
  /* [31][2][][] */ -127, -75, -67, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 32,3,3,1 } };
const TfArray<32, float> quant2_scale = { 32, { 0.0014426158741116524, 0.001676716492511332, 0.0013913093134760857, 0.0011828010901808739, 0.0014372158329933882, 0.0016325161559507251, 0.0014872500905767083, 0.0017700731987133622, 0.0014491123147308826, 0.0020504239946603775, 0.001266348292119801, 0.0015562581829726696, 0.0012082135071977973, 0.0013214456848800182, 0.0015159447211772203, 0.0017805093666538596, 0.0017073964700102806, 0.00056304113240912557, 0.0010511380387470126, 0.0014620297588407993, 0.0010126281995326281, 0.0017901248065754771, 0.0019390926463529468, 0.001647859113290906, 0.0016717675607651472, 0.0017144379671663046, 0.0021255321335047483, 0.0013908927794545889, 0.0014881886309012771, 0.0010762366000562906, 0.001195242628455162, 0.0011563898297026753, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[32] = { 18685, 3378, 31631, -16634, 4509, -18297, 19155, 2221, -195, -13346, 35093, -17736, 10417, 22467, 13156, -14755, 6725, 55695, -948, -9421, 28432, -18878, 3592, -10742, -744, 10905, -13471, 9794, 12301, -21209, 23135, 36266, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<32, float> quant3_scale = { 32, { 5.6573176152596716e-06, 6.5753592934925109e-06, 5.4561151046073064e-06, 4.6384357119677588e-06, 5.6361409406235907e-06, 6.40202460999717e-06, 5.8323535085946787e-06, 6.9414641075127292e-06, 5.682793926098384e-06, 8.0408790381625295e-06, 4.9660720833344385e-06, 6.1029736571072135e-06, 4.7380926844198257e-06, 5.1821402848872822e-06, 5.944881650066236e-06, 6.9823900048504584e-06, 6.6956727096112445e-06, 2.2080046164774103e-06, 4.1221101128030568e-06, 5.7334505072503816e-06, 3.9710912460577674e-06, 7.020097655185964e-06, 7.604285201523453e-06, 6.4621931414876599e-06, 6.5559515860513784e-06, 6.7232863329991233e-06, 8.3354207163210958e-06, 5.4544816521229222e-06, 5.8360342336527538e-06, 4.220536084176274e-06, 4.6872264647390693e-06, 4.5348624553298578e-06, } };
const TfArray<32, int> quant3_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[16*3*3*32] = { 
  /* [0][0][][] */ -67,-44,-5,35,-22,-55,30,-26,18,-17,2,-23,-39,-75,8,-28,33,-51,32,15,-25,28,-39,21,13,43,-40,-10,-65,-19,-31,-2, -61,-41,-7,-6,-15,-27,-53,-32,-66,22,-93,17,-13,-30,12,14,-17,-88,-36,40,-64,-26,-8,29,-5,-8,-23,-64,-87,-22,-77,-127, -77,-15,-83,17,-10,26,11,51,-44,43,-20,35,-60,-39,-46,34,12,-83,10,5,-34,40,-54,43,13,-11,21,-111,-114,-11,-61,-66, 
  /* [0][1][][] */ -58,-87,-69,66,30,-24,3,-35,-82,-4,-59,-21,-95,-52,29,35,29,-28,-19,24,13,41,8,61,34,-14,3,-15,-2,66,35,-41, -62,-98,-63,16,17,29,10,25,-33,60,-46,0,-105,-34,22,62,5,-123,-8,33,-102,47,10,64,-48,-57,-19,-112,-93,15,-50,-105, 3,37,-62,60,32,59,-9,-21,-22,50,29,54,-23,-44,-42,64,-71,-43,22,3,-100,13,0,76,15,41,46,-10,-52,22,-66,-59, 
  /* [0][2][][] */ -49,-78,-86,-15,-30,31,-17,32,-115,-8,18,-14,-117,-103,-26,3,8,-75,23,26,-13,-2,-28,-13,-14,14,8,-31,27,-1,-26,-52, -43,-60,-97,-12,10,1,-41,46,-76,-1,-1,63,-40,-116,-12,39,-12,-54,32,33,-13,20,28,115,30,-26,6,4,-29,-7,-66,-42, -36,45,-18,13,0,56,-43,42,54,23,7,53,49,-28,-61,53,-27,-56,16,17,-31,49,-40,61,-2,-12,33,-45,-60,-11,-72,-34, 
  /* [1][0][][] */ -14,2,-6,-82,-25,-51,4,-9,-88,-52,-41,-28,-40,33,18,-53,102,115,13,33,88,-48,33,13,72,-76,-19,66,83,-28,88,87, -30,-18,51,-39,10,-30,-62,-28,-68,-17,30,-24,-31,-22,77,11,24,29,30,45,4,-10,-52,-26,8,-14,-3,12,56,-50,26,83, -20,0,6,10,43,-16,42,7,-25,38,55,-10,2,53,64,5,-34,75,-40,-17,59,-15,65,55,19,-5,39,-28,-27,-38,6,61, 
  /* [1][1][][] */ 23,-14,61,-73,-6,-53,16,-61,-6,-18,31,-64,44,48,41,-46,114,92,-11,7,44,-17,123,-44,-7,-45,10,-9,50,-38,53,68, 2,-38,79,-36,9,-80,-9,-4,-61,-18,48,-57,2,29,70,-45,-11,22,-46,39,42,-42,-70,32,34,-58,5,25,62,-67,60,101, 3,-63,27,-34,-10,-32,45,28,-34,-9,69,-16,3,-7,69,39,-22,36,17,-15,41,26,36,44,-17,9,30,53,68,14,97,67, 
  /* [1][2][][] */ 21,-6,85,0,46,-66,127,16,21,-7,-20,28,-27,66,-39,-24,112,54,-13,-46,43,-17,71,-67,-24,-27,-35,-40,-49,31,63,39, 60,-60,73,28,34,-53,75,33,-43,34,8,-34,6,47,58,-24,-77,-36,0,51,18,-29,-36,-4,16,52,4,-91,-15,40,-10,4, -10,-69,54,-30,41,-38,27,38,-1,45,124,-14,-25,34,21,-34,-34,62,-44,-2,6,-5,-14,-6,50,91,40,-73,20,58,62,49, 
  /* [2][0][][] */ -29,30,-63,12,11,42,-14,-24,46,9,-44,43,-8,-5,-24,43,-17,-45,-14,-15,16,21,76,51,44,11,47,46,37,59,-2,-49, 6,-4,-47,20,15,-3,-20,9,36,2,-4,39,2,10,-35,39,-8,-28,27,-3,-5,40,58,44,24,13,3,24,28,45,-29,-39, -12,39,13,3,-24,-8,6,24,3,-29,-37,5,41,6,-64,12,-20,-14,-1,17,-60,11,-16,-7,10,-27,25,24,18,32,-17,-34, 
  /* [2][1][][] */ 9,38,-60,15,-1,34,-50,-33,19,-13,-127,-5,-8,36,-26,-25,4,-9,-34,3,20,-18,50,7,64,17,30,84,38,21,14,40, -12,15,-41,32,19,4,-49,-11,-13,9,-76,8,-28,-2,12,-24,52,-42,-28,-27,3,-30,-21,-43,-6,-24,-1,9,-7,2,23,8, 21,-21,8,36,13,19,-14,-19,25,-7,-64,-30,3,-47,-40,26,-31,-28,10,-16,-6,-16,-14,-9,3,-19,-26,0,-34,8,-74,-40, 
  /* [2][2][][] */ 28,41,14,20,-19,33,-5,-38,34,-22,-40,-11,33,-8,-37,-19,-39,50,29,13,33,-31,18,61,45,81,10,40,25,17,-26,-25, 0,-17,-37,-27,5,-23,-17,21,-34,26,-11,29,30,18,7,4,61,8,18,14,-22,18,34,64,41,13,30,49,23,17,32,-26, 43,-2,-1,43,-2,1,33,30,26,-12,-20,-7,22,1,11,-5,74,4,-15,-27,-2,-12,19,33,2,-34,-6,28,20,40,-6,-21, 
  /* [3][0][][] */ -60,3,-52,41,6,68,-41,66,-21,17,-35,73,-11,15,33,26,11,-116,23,41,-63,61,98,-5,20,-17,9,16,17,16,-31,-44, 32,92,-6,81,0,47,9,22,22,16,-60,46,24,-19,-32,50,-63,-96,27,70,-50,67,28,-35,-20,62,60,39,-34,20,-5,-76, 2,70,-9,9,-7,72,17,43,28,-26,-72,65,18,-40,-4,-17,16,-52,44,61,47,46,56,-39,-6,45,21,43,52,-26,-24,53, 
  /* [3][1][][] */ 30,-20,-74,75,-28,66,-26,0,-16,65,-96,39,-22,-66,-13,21,25,-49,21,53,43,45,78,59,-21,35,-27,-44,-21,62,-57,-51, 31,105,-91,56,-46,-2,-71,-32,82,7,-102,32,101,-15,-94,-7,67,-27,-33,17,38,22,12,-27,49,-71,-43,18,24,-42,-28,-27, 77,81,-8,-4,-79,-13,-71,-42,-22,-47,-60,-6,67,27,-27,-45,-9,-27,43,-44,-26,-52,54,0,61,-2,3,78,63,-88,-59,52, 
  /* [3][2][][] */ 44,46,-67,23,35,-13,27,-12,38,23,-41,-15,41,2,18,69,37,19,2,-36,-28,-1,25,12,-39,-49,43,53,-7,49,-65,-70, 46,31,-51,39,-47,17,12,18,34,8,-127,-40,90,25,-62,-4,36,-60,45,-53,-47,24,11,17,26,5,-64,25,11,-31,-75,-33, 76,14,8,-42,-37,8,29,-50,-2,-7,-55,-36,32,32,-57,-1,12,-30,-36,-2,1,-86,30,-3,-8,-18,-68,78,-3,-49,-41,20, 
  /* [4][0][][] */ 58,70,40,22,31,-3,4,32,10,7,28,1,36,3,13,48,34,14,31,31,8,45,-25,-8,-11,11,-24,9,-42,-7,-41,-11, -29,10,44,-60,13,20,-65,-19,21,-45,4,23,34,-51,-23,-15,28,-16,6,-17,-20,-15,-18,44,-10,-30,-58,49,36,-51,-39,87, -2,21,40,-30,28,-10,-21,-30,-53,-5,-51,-35,29,-12,11,-20,42,56,25,-26,70,-13,125,32,-19,-45,25,49,72,-55,27,87, 
  /* [4][1][][] */ -8,57,27,-4,-19,20,-4,28,46,40,-21,33,63,21,-40,-7,19,92,30,-15,6,-1,34,32,55,-2,6,124,91,37,-15,-8, -18,44,-18,-31,-44,19,25,-33,32,-15,18,-29,19,-16,-59,15,-7,9,-16,-6,-47,-7,-4,49,-27,-10,-59,67,42,17,-31,13, 103,-6,55,-23,-36,-48,47,-39,56,-24,26,14,55,-14,35,-28,32,47,35,-33,16,-51,48,104,13,-13,2,87,127,-32,26,49, 
  /* [4][2][][] */ -41,34,-30,-15,21,12,57,-1,31,-6,-46,41,34,69,25,0,45,36,-34,8,-15,48,63,21,13,7,52,16,47,-15,51,10, -106,-43,-7,-7,26,38,27,22,39,31,-12,16,30,-8,-1,8,9,-20,-34,-42,-51,-27,12,17,-3,-64,-21,-11,-3,39,-14,37, 33,3,58,57,23,-8,110,40,63,5,25,-13,-16,58,-4,12,-22,37,-7,-29,-1,28,22,-45,17,81,-28,-47,14,41,-47,8, 
  /* [5][0][][] */ -52,-63,-113,34,34,55,-16,48,-64,-27,-90,32,-39,-14,-64,-14,-93,-69,19,3,-28,10,-109,54,-51,4,29,-56,-109,-14,-51,-46, -68,-30,-54,-12,23,10,-47,-21,-46,60,-22,31,-67,-45,24,45,-94,-127,5,53,-78,55,-53,50,-7,24,21,-69,-7,51,-20,-90, -82,2,-17,55,22,54,15,14,-21,-11,20,1,-11,-74,-50,-6,-64,-4,-34,59,-68,-23,-8,52,1,44,14,8,-61,49,-77,-94, 
  /* [5][1][][] */ -59,-79,-73,-54,19,43,-77,21,-30,-24,8,-10,-44,-89,-57,-13,-99,-19,-5,-4,-86,25,-116,12,-24,-18,-11,-72,-79,-39,-94,-104, -61,-54,-67,55,34,11,-24,13,-58,11,-32,10,-81,-19,8,-23,-109,-46,-36,46,-42,-10,31,31,17,45,5,-97,-37,-22,-33,-105, -45,-18,-32,-18,-26,-22,13,20,-45,19,-61,46,-46,-58,-31,0,-44,-37,-26,13,17,39,70,-67,16,56,-8,-75,-19,-31,-10,-116, 
  /* [5][2][][] */ -88,-85,-108,-30,38,-3,-84,2,-77,-19,-84,36,-85,-104,-22,-20,-49,-64,-42,-4,-68,-2,-32,114,-40,-72,1,-24,-84,46,-14,-30, -9,-31,-82,-7,-25,46,-50,14,8,-20,-83,44,-23,-79,-1,50,-8,-62,41,26,-31,34,-9,11,-41,-34,44,-53,-11,-22,12,-90, 64,31,-34,53,38,1,-1,16,44,11,-22,-38,8,-27,-14,-14,0,-52,7,19,11,28,-10,71,20,34,10,-2,-29,13,13,-16, 
  /* [6][0][][] */ 27,-11,13,18,-2,9,-53,19,-16,-4,40,-38,-1,14,17,-47,35,53,-1,-8,62,-30,29,76,22,19,0,-26,32,-4,42,45, -42,-49,-77,25,4,11,-15,-23,-73,14,-55,1,-55,-11,42,-35,2,-30,7,26,39,31,-13,127,49,-11,0,-2,18,44,17,67, -46,-8,-73,37,41,39,10,50,-53,51,6,1,-45,-18,31,50,-31,-37,-23,12,10,44,95,84,23,-21,72,-10,33,14,-6,3, 
  /* [6][1][][] */ 62,5,57,-28,-2,5,54,-27,20,-5,117,-3,45,14,0,-37,13,39,7,-41,-1,-10,-7,-10,14,64,-44,0,1,11,29,32, 26,-17,-61,-20,11,-33,-23,14,-25,-9,-49,-29,-61,-91,49,-22,-28,-40,22,25,23,-42,-15,-15,34,-18,20,26,21,-42,-17,-2, -41,-81,-80,10,20,-4,-46,25,-85,20,-18,31,-108,-2,28,-5,-16,26,-15,23,0,27,14,19,52,-81,52,-6,1,5,35,-12, 
  /* [6][2][][] */ 28,20,68,28,7,-9,55,5,-2,10,59,-3,32,55,-48,-14,-17,3,24,-25,-35,-9,-1,0,-2,42,-27,-59,-20,-18,-14,-49, -11,2,23,-11,11,-19,-50,-21,4,1,-36,-25,-10,-47,-21,-14,-29,-42,12,3,-7,-37,-25,44,-32,55,-25,-39,-41,-3,-10,-19, 3,-20,-48,-38,30,0,1,6,-82,-21,-19,-32,-80,-65,47,-31,-60,44,29,0,19,-24,-54,8,1,-83,-12,-44,-8,-14,33,-30, 
  /* [7][0][][] */ -6,-21,74,-19,-11,11,54,6,24,-28,43,-1,26,55,22,-33,-6,15,-16,-6,26,2,-22,-2,3,39,-26,2,10,17,4,-3, 6,17,70,0,4,-28,32,-10,18,-34,69,13,24,21,-6,-31,3,53,25,-5,26,-31,-28,12,-31,44,-16,20,-16,-16,-12,3, 15,-3,61,-42,0,-11,8,8,-12,-22,127,-23,-15,-16,8,-21,37,30,-18,-27,47,-24,20,20,13,41,-32,14,37,-25,15,25, 
  /* [7][1][][] */ -14,12,-29,-4,16,-8,-13,-4,-6,0,-23,-14,-26,11,27,-12,22,-3,-22,-18,8,17,-43,58,27,-36,4,10,4,23,12,15, -40,-31,15,2,3,-26,27,20,-23,-7,-15,-12,1,24,2,1,-12,13,-7,-15,-10,26,3,65,9,-46,-7,-5,5,-17,-50,-14, 4,-7,-10,-20,35,-20,-14,27,23,33,-18,27,-46,2,27,19,35,12,19,-9,7,34,-10,57,21,37,2,7,13,12,-11,-13, 
  /* [7][2][][] */ 16,4,31,-29,27,4,24,-8,9,6,30,-24,5,20,4,-2,6,-16,12,12,-28,-21,-2,-24,9,10,33,16,18,-14,17,2, -28,-17,25,-25,14,-7,-31,4,-36,14,28,-17,-26,-19,14,23,-41,-1,-14,-9,-11,-6,-31,17,9,-8,19,28,28,18,-25,-15, -26,-28,-32,-12,-9,18,15,4,-5,25,22,-8,-54,-17,5,17,40,25,5,9,-15,21,13,44,34,-18,17,-3,22,33,-10,-23, 
  /* [8][0][][] */ 36,1,127,-39,-22,-17,46,44,15,-19,29,39,82,64,23,25,7,15,27,-56,22,-38,13,-27,-28,-14,-43,17,52,-74,6,101, 63,-26,63,-49,18,17,-6,27,-31,18,30,17,-5,20,27,-23,-64,60,-36,38,3,-68,36,-26,-23,-1,-1,15,4,-81,-20,58, 6,-27,19,-34,-38,-47,-18,-25,-20,-30,12,-52,-25,46,45,14,98,41,29,2,85,-57,66,30,74,57,48,23,36,-66,126,70, 
  /* [8][1][][] */ 70,58,35,-27,-27,-38,41,-42,-24,14,32,1,83,50,-62,-11,-28,75,31,-5,69,-43,-57,-56,-46,-12,-41,22,46,21,13,45, 87,3,31,0,-9,13,63,-61,39,-49,78,-20,2,-10,-15,-30,-62,26,18,-39,38,-5,19,10,24,56,-56,55,23,-43,52,106, 102,-12,75,1,14,-55,-31,28,-59,28,-44,11,17,69,45,31,53,77,18,-33,66,-46,98,-71,45,3,-35,17,74,14,40,104, 
  /* [8][2][][] */ 68,-8,46,58,57,51,96,53,18,26,24,25,45,103,47,3,34,2,-5,-28,-12,21,-13,-101,-45,4,-39,-26,-3,22,-20,62, 18,22,31,-37,66,-57,98,45,-7,-35,3,-32,-11,54,28,12,13,18,38,57,29,8,-43,-82,-59,-42,-14,33,-14,53,52,16, 79,-52,96,18,-28,-52,53,6,0,56,10,-21,46,54,51,-10,52,40,-14,-22,59,33,44,-94,-29,95,36,1,38,-4,62,75, 
  /* [9][0][][] */ 23,4,12,47,47,57,-25,0,39,58,27,-18,46,53,36,5,-20,43,36,18,45,11,63,42,-15,14,34,64,31,42,-17,-70, 24,53,31,38,-19,53,-6,-7,24,-22,-16,0,65,-6,-76,30,83,-18,8,-27,-4,37,47,74,-40,-22,-69,-2,76,-27,-12,55, 90,9,-40,-24,-4,35,-11,-34,20,15,31,-40,58,13,-44,-45,73,80,23,-17,80,-42,89,26,56,89,25,124,57,-8,-23,60, 
  /* [9][1][][] */ 26,80,35,83,52,-5,23,-4,75,19,-46,33,75,-1,-21,1,-12,59,-23,26,27,-5,127,-11,-12,20,28,30,6,46,-14,16, 23,4,-20,-39,-54,1,-22,-20,69,2,-1,-45,1,-53,1,1,-32,-71,15,-77,-28,-23,24,-54,-73,-5,-49,-2,56,-2,-89,-55, 71,99,22,-43,-45,-36,53,-35,55,-39,19,-24,37,61,-44,10,70,-8,-13,-28,-33,-30,-41,-88,28,85,-40,59,65,-38,-23,-10, 
  /* [9][2][][] */ 0,33,-17,48,41,23,46,3,58,36,-124,-24,49,23,10,6,112,52,21,0,67,24,107,73,47,27,3,-18,-4,54,2,-30, -9,-34,7,9,51,2,17,-34,-8,-15,-57,17,0,-35,-9,48,-24,-59,19,-8,-62,25,74,-32,-16,-23,18,-38,-57,14,-73,-54, 18,17,18,0,35,18,24,-13,96,5,90,-26,73,41,-21,56,7,-3,-25,16,-12,38,30,-13,28,107,11,-97,-65,-12,-47,-16, 
  /* [10][0][][] */ -4,15,14,28,4,-22,-8,14,56,12,-12,25,45,24,16,-14,12,-47,-4,-35,-50,-4,24,-71,18,34,27,-18,-105,9,-47,-54, 2,-45,-24,16,-1,-27,-54,0,-39,30,-18,-26,7,-58,-20,41,6,-50,-25,30,-29,9,-20,-32,-12,-48,19,-52,-127,20,-44,-89, 21,31,29,-19,-26,-35,-41,-31,11,-25,18,14,-7,-22,-24,5,54,-11,5,-37,-3,20,19,-65,-42,13,29,-28,-5,18,-39,5, 
  /* [10][1][][] */ -15,3,-13,37,22,44,-23,39,35,35,-62,0,-16,42,1,5,56,-78,26,21,-42,-19,74,33,41,22,2,25,-38,61,41,-14, 22,-21,7,37,-28,50,-5,-32,-4,2,-53,4,-12,-43,36,-20,35,-21,21,9,-66,-8,-12,36,-29,-14,31,-1,-4,-14,-34,-51, -7,17,4,26,-22,-10,-19,4,43,-29,-5,20,-15,-12,-7,11,-36,-38,-19,31,-43,-12,-25,62,-61,34,20,-14,29,-37,-28,-55, 
  /* [10][2][][] */ 2,-4,-79,35,-29,37,-36,1,-47,-12,-90,19,12,22,37,-25,48,-27,36,45,36,36,44,53,56,-24,31,78,72,10,61,10, -3,2,-15,30,20,-9,6,11,-18,9,-87,38,-8,-37,-20,27,54,-33,24,-21,-24,-30,45,58,36,-58,-21,-29,-4,17,-16,23, 24,18,-35,-11,-26,32,-33,-42,-11,3,30,8,8,-8,-42,-34,8,-58,26,-6,-36,-1,-36,73,-15,56,-18,24,13,-17,-71,-10, 
  /* [11][0][][] */ 61,18,-11,22,-20,-23,15,-11,15,19,24,-20,8,-6,-5,32,17,27,-32,24,65,-38,53,127,8,52,-28,51,69,10,8,9, 12,-8,26,-15,-20,-8,-18,-38,-26,-28,-50,-34,21,-9,29,-18,24,-5,-9,42,71,-6,81,30,55,-7,15,81,96,-37,22,63, -46,-16,-28,24,28,21,11,-5,-38,25,-68,-17,-56,-25,0,14,79,7,20,21,49,3,88,50,72,-6,62,98,101,48,85,79, 
  /* [11][1][][] */ 66,85,-20,48,-13,33,50,11,68,-22,-10,-11,21,43,-26,37,-47,-41,-33,14,-26,21,3,28,-31,95,-15,70,64,33,-95,-50, 60,40,-14,-15,19,-32,-12,0,11,-46,33,-40,71,-8,-18,3,53,-34,-19,-19,-39,-47,7,19,59,84,-17,87,77,11,28,40, -35,-45,-35,-12,28,-20,18,-11,-44,-17,-38,-8,-25,-18,5,-28,71,-28,4,20,-1,0,91,46,89,-22,48,61,76,28,75,24, 
  /* [11][2][][] */ -24,33,-10,6,30,-15,-2,6,46,46,18,-11,16,13,21,18,-34,-20,-5,2,-62,41,32,-73,-26,12,-3,62,59,57,-60,-45, 41,22,-5,9,-16,35,25,21,10,-17,22,36,58,45,-29,-12,32,-23,-32,-33,-25,35,13,-33,14,81,-28,9,21,-1,-34,23, 13,26,14,10,4,17,39,21,-4,-30,34,1,7,-9,40,13,85,-16,20,-2,17,12,48,-15,53,48,-28,-13,27,14,41,8, 
  /* [12][0][][] */ 114,63,-72,53,49,75,68,-25,40,24,-19,27,67,-31,66,71,44,37,-29,1,19,64,47,48,-21,88,37,31,39,89,3,-2, 61,52,51,-20,10,44,-40,17,123,-4,-112,31,71,-43,-112,51,-49,-56,55,-22,-26,5,-15,-8,-34,-25,-45,56,-23,-29,-123,-20, 39,46,11,-5,-65,-66,-28,-53,82,-36,-70,-19,19,31,-48,-59,-5,48,-13,-36,-50,10,-67,-65,-64,-63,-105,57,-8,7,17,17, 
  /* [12][1][][] */ 29,103,18,9,23,30,22,33,73,67,-21,66,112,9,50,4,104,66,-6,68,95,53,11,-57,5,-25,-22,19,80,6,-35,38, -35,81,46,-9,-17,29,-22,23,3,25,-111,-52,72,21,-71,26,-65,-42,24,-28,23,-28,42,30,10,-62,-35,3,56,-47,-78,26, 69,58,14,-67,-61,-34,49,-72,92,-20,-59,-9,58,19,-35,-83,60,-8,53,7,-41,-44,-73,16,-29,-24,2,1,-19,25,23,13, 
  /* [12][2][][] */ 2,24,13,-21,57,30,53,-3,57,49,-71,68,58,50,-45,-5,123,91,-7,-46,20,55,112,49,36,-56,3,101,61,26,62,0, -25,20,-31,-1,-29,32,3,-63,15,-51,-99,22,45,41,-95,18,-108,7,-19,-19,39,-17,21,-80,26,-44,-48,-25,-32,-18,-53,51, 13,-32,22,36,14,-54,43,1,114,38,51,-34,-4,127,16,-19,5,-11,33,-54,16,-14,69,-45,19,-60,22,67,8,-1,58,74, 
  /* [13][0][][] */ -7,34,-26,36,-47,-44,-5,-45,-31,-23,40,-18,65,7,-55,-45,-37,-47,-38,28,3,23,37,-127,32,3,34,14,29,-11,45,47, -12,25,39,-67,-11,41,-36,21,39,-66,57,-52,-18,5,68,-5,70,35,-7,-19,15,11,98,26,42,-53,-30,-10,97,-34,67,-12, -26,24,80,-30,37,27,20,31,-34,-31,44,56,61,51,19,-2,-49,-1,-30,-2,89,-58,-4,73,-48,16,30,54,107,-4,31,107, 
  /* [13][1][][] */ 56,19,39,21,0,74,-3,65,40,49,60,44,17,3,41,-23,-4,-59,47,10,1,-20,-77,42,-52,61,62,24,72,82,-77,-9, 42,48,-27,6,-23,-5,-52,21,18,-32,93,-2,23,51,8,-21,-14,67,61,-26,-25,51,47,34,67,-30,-44,91,75,45,18,66, 13,-29,-26,-24,24,53,55,-68,39,9,54,-68,78,-45,-45,45,7,104,60,-47,22,-64,22,98,65,17,-46,111,109,-62,-1,-15, 
  /* [13][2][][] */ 71,32,7,33,-52,80,35,1,0,-7,13,78,53,50,53,42,33,83,-49,-53,60,-31,2,-49,-46,7,-23,103,75,-2,-27,-9, 87,-24,32,-58,-74,-22,-41,1,29,20,85,-46,80,-25,-80,18,-26,39,42,19,79,-33,75,49,-38,13,-18,-16,96,11,-36,37, 24,-71,67,9,30,-99,3,-38,-47,-14,79,-91,35,0,-73,-86,34,111,-42,-56,-7,30,5,-13,-6,75,-7,92,52,-21,29,-12, 
  /* [14][0][][] */ -4,-24,-10,44,-40,55,-34,-39,-7,26,-125,11,0,-3,32,-20,-1,47,25,5,63,24,127,77,44,-64,68,50,121,-1,95,53, -64,60,-12,38,-1,12,30,48,47,63,-102,60,-34,-14,62,33,23,-4,-3,69,26,-3,90,103,87,8,81,58,95,11,9,76, 14,31,30,28,36,38,18,-21,29,27,-7,44,23,-28,-58,26,-22,-81,-16,53,-7,27,-44,104,32,26,21,60,50,42,-103,-32, 
  /* [14][1][][] */ 57,30,-16,-20,14,-42,-6,-21,21,12,-14,-7,-13,-47,49,-11,-34,69,35,3,58,24,71,-12,28,57,-23,74,89,16,85,54, -27,16,-29,-18,15,38,11,6,-25,-34,-42,-2,-69,27,42,-27,38,-26,34,14,55,-25,12,-37,87,-10,37,77,82,-33,86,28, -29,-9,-37,-39,-30,43,-67,9,51,-12,-8,-27,75,-66,-51,-7,-28,-36,15,-40,-25,13,-26,-38,25,14,-44,11,35,27,-4,-40, 
  /* [14][2][][] */ 51,9,57,50,-33,-51,-26,-16,69,-48,-4,-29,16,-12,-35,-9,69,12,-8,-13,58,-48,38,12,55,8,23,25,19,18,-16,2, -30,4,12,-13,-49,-27,-39,4,-1,-32,37,2,-2,-13,10,-54,17,46,3,-45,27,-28,24,-30,57,15,-8,44,59,-21,5,-2, -29,12,16,6,-38,39,1,-22,51,-27,-24,-28,49,-12,21,-5,-44,-48,-24,28,10,-2,15,-5,-15,-47,-33,63,44,14,-30,60, 
  /* [15][0][][] */ 61,-30,9,-13,-42,-65,-30,-23,-35,-6,32,-60,4,52,49,-15,5,24,20,-47,48,-1,23,120,6,33,-2,-6,53,-42,26,50, 24,50,6,-42,-19,38,42,49,41,-29,8,-22,23,88,33,28,-70,42,5,1,62,0,-48,110,49,-2,49,42,83,2,-21,26, 36,27,31,-46,-20,27,67,35,91,-58,53,0,81,32,-36,35,-54,86,8,-3,34,3,93,112,44,60,-36,55,65,-77,-45,114, 
  /* [15][1][][] */ -18,-38,45,-48,-36,-70,-11,-51,7,12,71,-51,-19,15,13,17,12,47,45,-41,-45,-21,20,-46,-11,-44,-21,36,59,-8,-31,-53, 49,72,82,0,-35,-45,-7,-20,3,-3,39,6,-3,22,-8,-32,-61,47,-48,2,14,14,3,-109,32,8,-16,111,19,-38,13,21, 28,43,102,-45,9,-23,38,-57,84,-50,97,-37,54,34,-52,-28,2,68,-36,-28,24,-41,65,-51,-22,71,-68,37,107,-2,-62,98, 
  /* [15][2][][] */ 0,-83,38,42,52,5,89,62,-46,-5,31,-21,-42,-9,6,29,5,-64,48,-43,6,-5,-31,-68,13,-2,-19,-107,-43,32,-77,-32, -22,8,50,55,22,38,33,46,5,-28,90,14,10,10,-18,44,-58,33,1,-33,-21,18,-15,21,30,30,36,-31,31,33,-34,27, 1,-32,108,11,22,-22,74,26,93,27,127,5,-28,75,15,53,33,24,-30,14,-42,62,52,-73,-6,9,12,-60,-48,5,-63,-18, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 16,3,3,32 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0027530377265065908, 0.0025224559940397739, 0.0034220432862639427, 0.0024877020623534918, 0.003104751231148839, 0.0024734772741794586, 0.0033418661914765835, 0.0042934822849929333, 0.0022835957352072001, 0.0025552746374160051, 0.0031470595858991146, 0.0033618807792663574, 0.0020800100173801184, 0.0018493790412321687, 0.0027455734089016914, 0.0023969104513525963, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[16] = { -3759, 5549, -3500, -5511, -1858, -1228, 883, 459, 6228, -2721, -3077, -3045, -628, 885, -2623, 3886, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 1.5019986676634289e-05, 1.3761981790594291e-05, 1.8669938071980141e-05, 1.3572372154158074e-05, 1.6938860426307656e-05, 1.349476497125579e-05, 1.8232509319204837e-05, 2.3424323444487527e-05, 1.2458811397664249e-05, 1.3941034012532327e-05, 1.7169686543638818e-05, 1.8341705072089098e-05, 1.134809099312406e-05, 1.0089817806147039e-05, 1.4979263141867705e-05, 1.3077032235742081e-05, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[2*1024] = { 
  -4, -41, 15, -24, 9, -9, 27, 2, -9, 25, -21, 37, -13, 35, 15, -1, 5, 2, 17, -51, 31, 30, 0, -1, -17, -2, 5, 11, 23, 32, 11, 38, 19, 33, 10, -14, 8, -15, 71, 20, -14, 38, 23, 60, -39, -20, 66, 30, 19, -38, 53, 54, 3, 10, 20, 19, -11, -31, 53, 12, 7, -21, 59, 20, 9, -52, 50, -8, 24, -16, 43, 27, -55, -22, 26, 14, -8, 31, 58, -35, -1, -31, 41, 22, -1, 9, -37, -16, -15, 19, 14, 12, -7, 7, 10, 22, 18, -4, 12, 29, -10, -15, 63, -28, 5, 19, 24, 36, -2, 33, -20, -12, 28, -28, -21, 27, -36, -16, 14, -34, -18, -24, 0, -4, 11, 35, 47, -6, 8, -20, 15, -12, 32, 15, 6, 16, -5, 25, 24, -11, -9, 43, -22, 9, 0, -20, 20, 17, -1, 4, 7, 7, -5, -17, -15, 72, -12, 3, 22, -13, -3, -23, 27, 24, -23, -14, -13, 20, -40, -15, 20, 37, 4, 10, 32, -32, 8, -17, 7, 25, 4, -9, 6, -5, -60, 45, -13, 6, -15, -37, 30, -4, -19, -18, 1, -7, -6, 5, 48, 2, 4, -25, -26, 51, -17, -33, 16, -10, 32, -19, 57, 19, -35, -5, 13, 25, -49, -12, 15, 0, -13, -1, 27, 0, 20, -45, 32, 11, 56, 19, -30, -4, -22, 66, 3, 1, 31, -17, -4, 0, -9, -44, -22, 12, -16, 5, -28, -56, -25, 14, -6, -9, -9, 2, -41, -18, 41, -5, 30, 37, -67, 47, 32, -8, -66, -17, 5, -44, -35, -6, -6, -46, 23, -59, -5, 32, -25, 23, 6, -7, -53, 17, 34, -18, 9, -31, 0, -16, -15, -11, 34, 48, 15, -11, -23, -27, -17, 64, 11, 29, 52, -50, 6, -14, -19, 20, -17, -24, -32, -10, 20, 2, -59, -3, 2, -44, 5, 0, -15, -2, -16, -38, -11, -1, 32, -18, -7, 0, 18, 19, 9, 48, 3, 1, -23, 5, -25, 33, 11, 31, -35, 5, 53, 11, -2, -18, 1, 67, -15, -56, 48, -19, 26, 20, 61, -16, -7, -3, -8, 15, -43, 15, 35, 14, -8, -51, 38, -27, 20, -80, 31, 6, 11, -7, -24, -12, 0, -2, 21, -47, 11, -46, -7, -32, 24, -5, 9, 28, 3, 35, 23, -48, -45, -6, 47, -34, 22, -34, -21, -19, -16, -28, 42, 45, 12, -2, -43, -50, -9, 24, -4, -69, 57, -30, 34, -26, -29, -6, -37, -21, 25, -36, -15, 21, 0, 18, -4, -25, 62, -37, -1, -69, 15, 11, -2, -12, -23, -9, -17, 25, -53, -26, -9, -78, -23, -42, -18, -18, -16, -101, -5, -9, -1, 17, -64, -7, 13, -8, 11, 55, 50, -30, -13, 27, -18, 23, 17, 14, -1, -3, 70, -25, 34, -12, -20, 10, -28, -24, 10, -10, -24, 48, 39, -20, -24, 9, 20, -26, -16, -12, 13, 5, -2, -65, 35, -40, -30, -43, 39, -23, 15, -6, 3, -31, -25, -25, 56, 27, 8, -12, -5, -52, 19, 1, 26, 37, -35, 9, 8, -20, -41, -27, -8, -26, -11, -54, 35, 8, -65, -54, -3, 34, 41, -58, -61, -34, 15, 38, -28, -39, 61, -8, -5, 18, -13, 18, -37, -41, -16, -48, -2, -22, 46, -32, -41, 3, 27, -26, 17, -15, -1, 13, -6, -51, -43, -15, 6, 16, -44, -55, 7, -22, 6, -1, 65, -24, -14, -35, -9, 12, 23, 18, -75, -7, -31, 32, 8, -58, 35, -52, -4, -22, -2, -10, -18, -10, -13, -17, -8, -23, 14, 16, -33, 33, 10, 15, 1, -25, -14, 32, 32, 10, 8, -30, 6, -14, 0, -47, -13, 34, 5, 2, 19, -33, -44, -21, 33, -4, 11, -53, -19, -70, -47, -5, 38, 20, 4, 7, 50, -25, -18, -33, 23, 2, 17, -36, -7, 6, 13, 3, -75, -11, 7, 11, 17, -11, -6, -7, -24, -11, 62, -36, -76, 8, 26, 78, -1, 25, 50, 34, -28, 45, -11, 28, -31, -22, 90, -29, 36, -4, 55, 101, -49, 52, 34, 14, 12, 50, 9, 75, 19, -28, -53, -25, 10, -8, 95, -60, -30, 86, -31, -38, 33, 27, -15, -13, -7, 9, 34, 9, -39, -43, -4, 16, 12, -13, 54, -49, 0, 41, -38, -14, 20, 13, 2, -38, -50, -20, 17, 25, 21, 5, -10, 16, 36, 53, -45, 17, -6, 16, 35, -9, -9, 7, 54, 10, -55, -1, 22, 3, 19, 73, 1, 10, 6, -42, 21, -37, -38, 42, 15, 47, -29, 31, -28, 5, 0, 26, -18, 1, -35, 1, -31, -22, 32, 14, -19, -62, -4, 6, -5, 9, 10, -18, 4, -55, -11, 10, -16, 12, -24, -11, -41, 13, -2, -66, 2, 7, -29, -30, 8, -18, -21, 16, 16, 3, -55, 0, -38, 39, -22, 6, 1, 15, -87, 10, 14, 43, -28, -7, 8, -11, -9, 41, 36, -26, 14, 76, -8, -3, -33, 18, 4, -34, 6, -14, 52, 1, -33, 18, -17, 17, -15, 10, 8, -45, 3, 49, 10, 16, -16, -29, 8, -30, -8, 22, 18, -6, 1, 9, 10, -27, -15, 28, -13, -19, -25, -32, -13, 16, -13, 21, 3, -19, 0, -25, -23, 15, -30, 11, 43, -22, -12, -30, -27, 41, -54, 63, -50, -1, 22, -77, -15, 14, -18, 26, -20, -11, -18, -37, -97, -12, 14, 23, -7, -80, -26, 13, -101, 29, -23, -10, 4, 20, 14, -5, -43, 19, 28, -21, -67, -65, 31, 10, -64, -13, -7, -15, 38, -75, 20, -20, -18, 23, -5, 7, -63, -13, -1, -72, 21, 18, -5, -21, 25, -27, 14, 1, 14, 5, -12, 20, -25, -6, 14, 46, -30, 16, -19, -38, 4, -22, -16, 5, 9, -13, -18, 17, -41, 34, 24, -36, -6, 28, -24, -30, -5, -5, 6, 15, -4, -2, 0, -12, -25, 27, -5, -5, 2, 46, 4, -41, -14, -8, 7, -15, -66, 23, 6, -31, -28, -50, -35, -3, -52, -26, -34, -85, 46, -29, 46, 6, -62, 12, 45, -62, -66, -25, 49, -104, -30, -44, -12, -51, 
  12, -11, -20, 22, 15, 6, -2, 15, 15, -16, 23, -29, 11, -34, -25, -28, 15, -20, 15, 55, -44, -21, -15, -7, -21, -13, 44, -28, -18, -19, -2, -5, -22, -28, -5, -8, -6, -14, -52, -30, -16, -17, -12, -25, 23, -7, -47, -17, 1, 41, -35, -31, -1, -11, -30, 6, 27, -5, -23, -15, -6, -19, -56, -4, -25, 67, -60, -45, -29, -8, -22, -7, 52, -20, -47, -12, -6, -18, -80, 24, -23, 41, -10, -43, -16, -25, 72, 2, -10, -56, -18, -50, -4, 4, -6, -20, -2, 36, 32, -23, 8, 14, -25, 26, 21, -12, -26, -31, -32, -46, 28, 12, -16, 10, 25, -31, 17, -26, -14, 49, 42, 27, 9, 28, -21, -50, -34, 2, -12, 18, -6, 40, -16, -29, -9, 0, 47, -25, 6, 28, 7, -14, 23, -9, 6, -6, 1, 21, 25, -15, -9, -23, 35, 28, 44, -64, 28, -13, -3, -27, 1, 43, 6, -6, 38, 6, 12, 11, -5, -19, 9, -52, -46, 7, 12, 8, 17, 42, -4, -4, -45, -4, 23, 7, 12, -8, 16, 12, 9, 47, -47, 4, 20, 20, -24, -20, 44, -21, -42, -12, 33, 7, 34, -34, 31, 35, -13, 32, 6, -1, -31, -27, 23, -22, -10, -18, 5, 25, -27, -16, 27, -7, -46, 0, -4, 42, -11, 13, -9, 15, 39, -14, 26, -32, -8, -18, -23, -25, 35, 28, -16, 52, 37, 19, -8, -2, -5, 54, 24, 22, 19, -19, 12, 2, 51, 5, 3, 12, 9, -20, 54, 2, -6, -3, 47, 22, -50, 29, 42, -14, 37, 47, -15, 58, -38, -38, -18, -27, 21, 10, 18, -25, -19, 3, -19, 11, 2, 11, 25, 9, -23, -41, -51, -7, 1, 39, -12, -54, 40, -20, -47, 13, -9, 55, -22, -7, 11, -9, 17, -3, 25, -17, 47, -20, 19, 39, 40, 4, -37, 10, 1, 87, 2, -11, -16, 20, -28, 27, -43, -35, -17, -71, -4, 34, -13, -11, 22, -58, -23, -1, 16, 15, -60, 14, -16, -11, 30, -14, 15, 17, -71, 12, 10, 22, -45, -15, -8, 2, -6, -16, 29, -12, -10, 7, -21, 64, -15, 26, 17, 29, -36, -20, -16, -1, 33, 11, 10, -22, -26, 53, -7, 10, 51, 46, -20, 9, 13, -23, 9, 4, -24, 41, 89, -4, -37, 64, 22, 46, 28, 55, 64, 56, -20, -22, -19, -15, 39, 50, 14, -33, 29, 22, -54, 52, 1, 10, 7, 19, 37, -14, -7, 11, -2, 16, -16, -46, 32, -4, -33, 50, -18, 52, 3, -24, -3, 26, 24, -18, 7, 23, 33, 35, 1, 37, 0, 11, -24, 23, 15, 97, -2, -33, -8, 20, 27, 30, -17, -14, 0, -70, -8, 57, 26, 6, 20, -27, 14, 4, -9, 13, -30, 11, -15, -34, 15, -21, -3, 41, -46, 29, -23, -4, 5, -24, 5, -10, -62, 41, -10, 20, -46, -33, 33, 59, -50, 58, 8, -4, -16, -13, -7, 10, -41, 12, 20, -24, -49, -17, 24, 9, 15, 32, 4, 15, -22, -18, 9, -1, 14, 54, 47, 1, 25, 7, -19, 38, -1, 14, 87, 41, -7, -36, -13, 59, 55, 33, 19, -31, 31, -10, -32, -6, -35, 28, 26, 9, -13, 27, -30, 38, 5, 3, -3, 41, 76, -17, -1, 6, -35, 21, -13, -37, 12, 19, 33, -15, -11, 10, 36, 61, -12, 63, 3, 21, -23, 20, -8, 58, 16, 7, 10, 32, 27, -2, 19, 10, -20, 15, 12, 43, -2, 39, 35, 36, -11, 12, 19, 24, 10, 24, 27, 13, 26, -1, 14, 18, 14, 12, 8, 9, -6, -19, 19, 32, -34, 11, -10, 8, -19, -11, 8, 30, -31, 5, 34, 3, 18, 34, -13, 25, -18, 49, 11, -32, -32, -39, 4, -14, -64, 19, -7, -12, -25, 23, 13, 8, 22, -6, 17, -23, 59, -4, -16, 40, 7, 2, 13, -15, -11, -16, -42, 17, 48, -37, -16, -57, 8, 1, -66, -23, 37, -43, 7, -1, 7, 9, -127, 21, -11, -22, -50, -94, 25, -49, -2, 2, -22, -80, 14, -86, -20, 25, 59, -11, -62, 14, -67, 49, 46, -86, 48, -3, -33, -38, -12, 26, 7, 2, -34, 11, 50, 38, 3, -35, -29, 24, -19, 44, -30, -21, 34, -13, 25, 20, -23, -10, 56, 23, -33, -26, 4, 14, -16, 0, -34, -71, 7, -12, 14, -19, -43, 39, 9, -22, -52, -10, 46, -14, -13, 26, -19, -76, 36, -47, 2, 21, -35, 54, 38, -16, -19, -28, 27, -36, 14, -12, -28, -33, -15, 2, 32, 9, 73, 18, 17, 3, 37, 32, 12, -12, 10, 32, 23, 28, 8, 28, -18, -8, 34, 2, 6, -2, 50, -17, -18, 73, -30, -41, 22, 26, 11, 51, -5, 5, -10, 12, 23, -43, 11, -34, 6, 0, 14, 5, 39, 22, 7, -28, 1, 22, 27, -9, -21, -48, -74, 55, 14, -121, -10, 16, 52, -53, 1, 18, -11, -4, -51, 9, 60, -18, -26, -15, -23, -31, -15, 49, -28, -64, -10, -15, 25, -15, 8, -10, 51, 4, -17, -4, -32, -13, -33, -4, 24, 18, -2, -10, 12, 32, 11, 27, 29, -10, -7, 5, 25, -16, -9, -11, -9, -4, -42, 4, -13, -2, 10, -25, 60, -45, 15, 31, -35, 67, -17, 11, 56, 14, 2, -28, 45, 32, 85, 4, 3, -14, 30, 93, 37, -11, 54, -31, 17, 53, -22, -26, -12, -12, 38, 11, 17, -19, 22, 24, -5, -8, 35, 12, -10, 41, 12, 59, -11, -22, -19, 5, -13, -17, 69, 2, -2, 60, 10, 10, 1, 7, 19, 17, -16, 3, 0, -15, 22, -8, 41, 6, -19, -56, 26, -9, 11, 19, -2, 5, -13, 3, 13, -24, 7, -17, 62, -13, -36, 54, 9, -42, -20, 6, -1, 4, -22, 11, -23, 14, -7, 20, 18, -34, -35, 9, -10, -37, 18, 53, -14, -1, -10, 12, 55, 17, 3, 73, 44, 58, 50, 33, 42, 22, 10, 54, -25, 14, -21, 12, 44, -48, -41, 25, 53, -2, -32, 53, 6, 17, 18, 44, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 2,1024 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0027916517574340105, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[2] = { -2038, 2038, };
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const TfArray<1, float> quant7_scale = { 1, { 2.5184972400893457e-05, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,32,32,32 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0054557868279516697, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,16,16,32 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0054557868279516697, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0090215308591723442, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,8,8,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0090215308591723442, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,1024 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0090215308591723442, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,2 } };
const TfArray<1, float> quant13_scale = { 1, { 0.061392210423946381, } };
const TfArray<1, int> quant13_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,2 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 8 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 9,4,5 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 11,1 } };
const TfArray<1, int> outputs4 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs5 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension0, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension9, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4096, (TfLiteIntArray*)&tensor_dimension11, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1024, (TfLiteIntArray*)&tensor_dimension13, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 15;
  for(size_t i = 0; i < 15; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  14, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 7; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
